import React, { useState, useEffect } from 'react';
import {
    Spinner,
    Dropdown,
    DropdownToggle,
    DropdownMenu,
    DropdownItem
} from 'reactstrap';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { toast } from 'react-toastify';
import { postBillingReport } from "../../helpers/fakebackend_helper";

const ReasonWiseBillingEfficiency = () => {
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [reportData, setReportData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [exportLoading, setExportLoading] = useState({ excel: false, pdf: false });
    const [dynamicColumnKey, setDynamicColumnKey] = useState("");




    const authUser = JSON.parse(sessionStorage.getItem('authUser')) || {};
    const loginName = authUser?.user?.loginName || 'Unknown User';
    const reportHeaderLocationName = authUser?.user?.reportHeaderLocationName || 'Unknown Office';

    const reportInfo = {
        officeName: reportHeaderLocationName,
        generatedBy: loginName,
        generatedOn: new Date().toLocaleString()
    };

const handleExportExcel = () => {
  setExportLoading(prev => ({ ...prev, excel: true }));
  try {
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.aoa_to_sheet([]);

    // HEADER
    XLSX.utils.sheet_add_aoa(ws, [
      ["Gulbarga Electricity Supply Company"],
      ["Reasonwise Billing Efficiency"],
      [`NameOfTheOffice : ${reportInfo.officeName}`, "", "", "", `GeneratedBy: ${reportInfo.generatedBy}`],
      [`GeneratedOn: ${reportInfo.generatedOn}`],
      [],
      ["Sl.No.", dynamicColumnKey, "ReasonName", "BilledInstallation", "% (Percentage)"]
    ], { origin: -1 });

    // Merging header cells
    ws["!merges"] = [
      { s: { r: 0, c: 0 }, e: { r: 0, c: 4 } }, // Title
      { s: { r: 1, c: 0 }, e: { r: 1, c: 4 } }, // Subtitle
      { s: { r: 2, c: 0 }, e: { r: 2, c: 2 } }, // Office
      { s: { r: 2, c: 4 }, e: { r: 2, c: 4 } }, // Generated By
    ];

    let slNo = 1;
    reportData.forEach(group => {
      // Group label row
      XLSX.utils.sheet_add_aoa(ws, [
        ["", `${group.groupLabelKey}: ${group.groupLabelValue}`, "", "", ""]
      ], { origin: -1 });

      group.rows.forEach(row => {
        XLSX.utils.sheet_add_aoa(ws, [
          [slNo++, row.dynamicValue, row.reasonName, row.billedInstallation, row.percentage]
        ], { origin: -1 });
      });

      // Subtotal
      XLSX.utils.sheet_add_aoa(ws, [
        ["", "Sub Total:", "", group.subtotal, ""]
      ], { origin: -1 });

      // Spacer
      XLSX.utils.sheet_add_aoa(ws, [["", "", "", "", ""]], { origin: -1 });
    });

    // Grand Total
    XLSX.utils.sheet_add_aoa(ws, [
      ["", "Grand Total:", "", grandTotalBilled, ""]
    ], { origin: -1 });

    // Column widths
    ws["!cols"] = [
      { wch: 10 },
      { wch: 24 },
      { wch: 24 },
      { wch: 20 },
      { wch: 18 }
    ];

    // Apply styles
    const range = XLSX.utils.decode_range(ws["!ref"]);
    for (let r = 0; r <= range.e.r; r++) {
      for (let c = 0; c <= range.e.c; c++) {
        const addr = XLSX.utils.encode_cell({ r, c });
        ws[addr] = ws[addr] || { t: "s", v: "" };
        ws[addr].s = ws[addr].s || {};

        // Title Rows (0, 1)
        if (r === 0 || r === 1) {
          ws[addr].s = {
            font: { bold: true, sz: 14 },
            alignment: { horizontal: 'center', vertical: 'center' }
          };
        }

        // Metadata rows
        if (r === 2 || r === 3) {
          ws[addr].s = {
            font: { sz: 11 },
            alignment: { horizontal: 'left', vertical: 'center' }
          };
        }

        // Table Headers
        if (r === 5) {
          ws[addr].s = {
            font: { bold: true, color: { rgb: "FFFFFF" } },
            fill: { fgColor: { rgb: "16A085" } },
            alignment: { horizontal: 'center', vertical: 'center', wrapText: true },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          };
        }
      }
    }

    // Apply group, subtotal, grand total styles
    for (let i = 6; i <= range.e.r; i++) {
      const cellB = ws[XLSX.utils.encode_cell({ r: i, c: 1 })];

      // Group row
      if (cellB && typeof cellB.v === "string" && reportData.some(g => cellB.v.includes(`${g.groupLabelKey}:`))) {
        for (let c = 0; c <= 4; c++) {
          const cell = ws[XLSX.utils.encode_cell({ r: i, c })];
          cell.s = {
            font: { bold: true },
            fill: { fgColor: { rgb: "EAF2F8" } },
            alignment: { horizontal: 'left', vertical: 'center' },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          };
        }
      }

      // Sub Total row
      if (cellB && cellB.v === "Sub Total:") {
        for (let c = 0; c <= 4; c++) {
          const cell = ws[XLSX.utils.encode_cell({ r: i, c })];
          cell.s = {
            font: { bold: true },
            fill: { fgColor: { rgb: "F1F1F1" } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          };
        }
      }

      // Grand Total row
      if (cellB && cellB.v === "Grand Total:") {
        for (let c = 0; c <= 4; c++) {
          const cell = ws[XLSX.utils.encode_cell({ r: i, c })];
          cell.s = {
            font: { bold: true, sz: 12 },
            fill: { fgColor: { rgb: "DFF0D8" } },
            alignment: { horizontal: 'center', vertical: 'center' },
            border: {
              top: { style: "thin", color: { rgb: "000000" } },
              left: { style: "thin", color: { rgb: "000000" } },
              bottom: { style: "thin", color: { rgb: "000000" } },
              right: { style: "thin", color: { rgb: "000000" } }
            }
          };
        }
      }
    }

    XLSX.utils.book_append_sheet(wb, ws, 'Report');
    XLSX.writeFile(wb, `GESCOM_Reasonwise_Billing_Efficiency_${new Date().toISOString().slice(0, 10)}.xlsx`);
  } catch {
    toast.error('Excel export failed');
  } finally {
    setExportLoading(prev => ({ ...prev, excel: false }));
  }
};


const handleExportPDF = () => {
  setExportLoading(prev => ({ ...prev, pdf: true }));
  try {
    const doc = new jsPDF('p', 'mm', 'a4');
    const pageWidth = doc.internal.pageSize.getWidth();

    // HEADER
    doc.setFontSize(15);
    doc.setTextColor(0, 0, 0); // Black
    doc.text('Gulbarga Electricity Supply Company', pageWidth / 2, 15, { align: 'center' });

    doc.setFontSize(11);
    doc.text('Reasonwise Billing Efficiency', pageWidth / 2, 22, { align: 'center' });

    doc.setFontSize(9);
    doc.text(`Office: ${reportInfo.officeName}`, 14, 30);
    doc.text(`Generated By: ${reportInfo.generatedBy}`, pageWidth / 2, 30, { align: 'center' });
    doc.text(`Generated On: ${reportInfo.generatedOn}`, pageWidth - 14, 30, { align: 'right' });

    // Table Headers
    const head = [[
      { content: "Sl.No.", styles: { halign: 'center', textColor: [0, 0, 0] } },
      { content: dynamicColumnKey, styles: { halign: 'center', textColor: [0, 0, 0] } },
      { content: "ReasonName", styles: { halign: 'center', textColor: [0, 0, 0] } },
      { content: "BilledInstallation", styles: { halign: 'center', textColor: [0, 0, 0] } },
      { content: "% (Percentage)", styles: { halign: 'center', textColor: [0, 0, 0] } }
    ]];

    let tableBody = [];
    let slNo = 1;

    reportData.forEach(group => {
      // Group Label Row
      tableBody.push(['', `${group.groupLabelKey}: ${group.groupLabelValue}`, '', '', '']);

      // Data Rows
      group.rows.forEach(row => {
        tableBody.push([
          slNo++,
          row.dynamicValue,
          row.reasonName,
          row.billedInstallation,
          row.percentage
        ]);
      });

      // Sub Total
      tableBody.push(['', 'Sub Total:', '', group.subtotal, '']);

      // Spacer
      tableBody.push(['', '', '', '', '']);
    });

    // Grand Total
    tableBody.push(['', 'Grand Total:', '', grandTotalBilled, '']);

    doc.autoTable({
      head,
      body: tableBody,
      startY: 35,
      margin: { left: 7, right: 7 },
      styles: {
        fontSize: 8,
        cellPadding: 2,
        overflow: 'linebreak',
        halign: 'center',
        textColor: [0, 0, 0],
        lineWidth: 0.1,
        lineColor: [0, 0, 0]
      },
      headStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
        fontStyle: 'bold',
        lineWidth: 0.1,
        lineColor: [0, 0, 0]
      },
      alternateRowStyles: {
        fillColor: [255, 255, 255]
      },
      columnStyles: {
        0: { cellWidth: 'auto', halign: 'center' },
        1: { cellWidth: 'auto', halign: 'left' },
        2: { cellWidth: 'auto' },
        3: { cellWidth: 'auto' },
        4: { cellWidth: 'auto' }
      },
      didParseCell: function (data) {
        const raw = data.row.raw;

        // Group Header Row
        if (raw && raw[1] && raw[1].toString().includes(':')) {
          data.cell.styles.fontStyle = 'bold';
          data.cell.styles.halign = 'left';
          data.cell.styles.textColor = [0, 0, 0];
        }

        // Sub Total Row
        if (raw && raw[1] === 'Sub Total:') {
          data.cell.styles.fontStyle = 'bold';
          data.cell.styles.textColor = [0, 0, 0];
        }

        // Grand Total Row
        if (raw && raw[1] === 'Grand Total:') {
          data.cell.styles.fontStyle = 'bold';
          data.cell.styles.fontSize = 10;
          data.cell.styles.textColor = [0, 0, 0];
        }
      }
    });

    doc.save(`GESCOM_Reasonwise_Billing_Efficiency_${new Date().toISOString().slice(0, 10)}.pdf`);
  } catch (error) {
    console.error(error);
    toast.error('PDF export failed');
  } finally {
    setExportLoading(prev => ({ ...prev, pdf: false }));
  }
};

    useEffect(() => {
        const fetchReportData = async () => {
            try {
                setIsLoading(true);
                const storedPayload = localStorage.getItem("reportPayload");

                if (!storedPayload) {
                    toast.error("No report parameters found");
                    return;
                }

                const parsedPayload = JSON.parse(storedPayload);
                const response = await postBillingReport(parsedPayload);

                if (response?.status === "success" && Array.isArray(response.data)) {
                    const groupedData = {};
                    let grandTotal = 0;
                    let dynamicKeyName = "";

                    response.data.forEach((item) => {
                        // Extract dynamic group key-value
                        const groupKey = Object.entries(item).find(
                            ([key]) => !["TariffCategoryName", "MeterReadingReasonName", "BilledInstallation", "Percentage"].includes(key)
                        );

                        const [groupLabelKey, groupLabelValue] = groupKey || ["Unknown", "N/A"];
                        const groupId = `${groupLabelKey}::${groupLabelValue}`;

                        // Get dynamic column key (e.g., TariffCategoryName, ZoneName, etc.)
                        const dynamicCol = Object.entries(item).find(
                            ([key]) => !["MeterReadingReasonName", "BilledInstallation", "Percentage"].includes(key) && key !== groupLabelKey
                        );

                        if (!dynamicKeyName && dynamicCol) {
                            dynamicKeyName = dynamicCol[0]; // e.g., "ZoneName"
                            setDynamicColumnKey(dynamicCol[0]); // Save in state
                        }

                        if (!groupedData[groupId]) {
                            groupedData[groupId] = {
                                groupLabelKey,
                                groupLabelValue,
                                rows: [],
                                subtotal: 0,
                            };
                        }

                        groupedData[groupId].rows.push({
                            slNo: groupedData[groupId].rows.length + 1,
                            dynamicValue: dynamicCol?.[1] || "",
                            reasonName: item.MeterReadingReasonName,
                            billedInstallation: item.BilledInstallation,
                            percentage: item.Percentage
                        });

                        groupedData[groupId].subtotal += parseInt(item.BilledInstallation) || 0;
                        grandTotal += parseInt(item.BilledInstallation) || 0;
                    });

                    setReportData(Object.values(groupedData));
                    setGrandTotalBilled(grandTotal);
                } else {
                    toast.error(response?.displayMessage || "Failed to fetch report data");
                }
            } catch (err) {
                console.error("Error fetching report:", err);
                toast.error("Error fetching report data");
            } finally {
                setIsLoading(false);
            }
        };

        fetchReportData();
    }, []);




    if (isLoading) {
        return <div className="text-center py-5"><Spinner color="primary" /></div>;
    }

    const grandTotalBilled = reportData.reduce((sum, group) => sum + group.subtotal, 0);

    return (
        <div className="p-4" style={{ fontFamily: 'Segoe UI', maxWidth: 850, margin: 'auto' }}>
            <div className="text-center mb-3">
                <h2 className="mb-1 fw-bold" style={{ color: '#16a085' }}>Gulbarga Electricity Supply Company</h2>
                <h5 className="text-muted">Reasonwise Billing Efficiency</h5>
            </div>
            <div className="mb-3 p-3 bg-light rounded">
                <div><strong className="fs-5">NameOfTheOffice :</strong> {reportInfo.officeName}</div>
                <div><strong>GeneratedBy:</strong> {reportInfo.generatedBy}</div>
                <div><strong>GeneratedOn:</strong> {reportInfo.generatedOn}</div>
            </div>
            <div className="table-responsive mb-3">
                <table className="table table-bordered text-center" style={{ fontSize: '13px', minWidth: '615px', background: '#fff' }}>
                    <thead className="text-white" style={{ backgroundColor: '#16a085' }}>
                        <tr>
                            <th>Sl.No.</th>
                            <th>{dynamicColumnKey}</th> {/* Dynamic column header */}
                            <th>ReasonName</th>
                            <th>BilledInstallation</th>
                            <th>% (Percentage)</th>
                        </tr>
                    </thead>
                    <tbody>
                        {reportData.map((group, groupIdx) => (
                            <React.Fragment key={`group-${groupIdx}`}>
                                {/* Dynamic group header row */}
                                <tr key={`group-header-${groupIdx}`} style={{ backgroundColor: '#eaf2f8', fontWeight: 600 }}>
                                    <td></td>
                                    <td colSpan={4} className="text-start">
                                        <strong>{group.groupLabelKey}:</strong> {group.groupLabelValue}
                                    </td>
                                </tr>

                                {group.rows.map((row, rowIdx) => (
                                    <tr key={`row-${groupIdx}-${rowIdx}`}>
                                        <td className="text-center">{row.slNo}</td>
                                        <td>{row.dynamicValue}</td> {/* Render dynamic value */}
                                        <td>{row.reasonName}</td>
                                        <td className="text-end">{row.billedInstallation}</td>
                                        <td className="text-end">{row.percentage}</td>
                                    </tr>
                                ))}

                                {/* Subtotal row */}
                                <tr key={`subtotal-${groupIdx}`} style={{ fontWeight: 600, background: '#f1f1f1' }}>
                                    <td></td>
                                    <td>Sub Total:</td>
                                    <td></td>
                                    <td className="text-end">{group.subtotal}</td>
                                    <td></td>
                                </tr>

                                {/* Spacer row */}
                                <tr key={`spacer-${groupIdx}`}>
                                    <td colSpan={5} style={{ height: 8, background: 'transparent' }}></td>
                                </tr>
                            </React.Fragment>
                        ))}

                        {/* Grand total row */}
                        <tr key="grand-total" style={{ background: '#dff0d8', fontWeight: 600 }}>
                            <td></td>
                            <td>Grand Total:</td>
                            <td></td>
                            <td className="text-end">{grandTotalBilled}</td>
                            <td className="text-end"></td>
                        </tr>
                    </tbody>

                </table>
            </div>
            <div className="text-end">
                <Dropdown isOpen={dropdownOpen} toggle={() => setDropdownOpen(!dropdownOpen)}>
                    <DropdownToggle color="success">Export</DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem onClick={handleExportExcel} disabled={exportLoading.excel}>
                            {exportLoading.excel ? <Spinner size="sm" /> : 'Export to Excel'}
                        </DropdownItem>
                        <DropdownItem onClick={handleExportPDF} disabled={exportLoading.pdf}>
                            {exportLoading.pdf ? <Spinner size="sm" /> : 'Export to PDF'}
                        </DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        </div>
    );
};

export default ReasonWiseBillingEfficiency;